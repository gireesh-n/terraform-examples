###Step 1: Create a provider.tf file, with below content.
provider "aws" {
  region = var.AWS_REGION
}

###Step 2:  Create a vpc.tf file, with below content.

# Creating VPC
resource "aws_vpc" "vpc-main" {
  cidr_block           = "192.168.0.0/16"
  instance_tenancy     = "default"
  enable_dns_support   = "true"
  enable_dns_hostnames = "true"
  enable_classiclink   = "false"
  tags = {
    Name = "vpc-main"
  }
}
# Creating Public Subnets
resource "aws_subnet" "vpc-main-public1" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-1a"
  tags = {
    Name = "vpc-main-public1"
  }
}
resource "aws_subnet" "vpc-main-public2" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-1b"
  tags = {
    Name = "vpc-main-public2"
  }
}
resource "aws_subnet" "vpc-main-public3" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.3.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "ap-south-1c"
  tags = {
    Name = "vpc-main-public3"
  }
}
# Creating Private Subnets
resource "aws_subnet" "vpc-main-private1" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.4.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "ap-south-1a"
  tags = {
    Name = "vpc-main-private1"
  }
}
resource "aws_subnet" "vpc-main-private2" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.5.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "ap-south-1b"
  tags = {
    Name = "vpc-main-private2"
  }
}
resource "aws_subnet" "vpc-main-private3" {
  vpc_id                  = aws_vpc.vpc-main.id
  cidr_block              = "192.168.6.0/24"
  map_public_ip_on_launch = "false"
  availability_zone       = "ap-south-1c"
  tags = {
    Name = "vpc-main-private3"
  }
}
# Creating Internet Gateway
resource "aws_internet_gateway" "main-gw" {
  vpc_id = aws_vpc.vpc-main.id
  tags = {
    Name = "gateway-main"
  }
}
# Creating Routing Table
resource "aws_route_table" "main-public" {
  vpc_id = aws_vpc.vpc-main.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main-gw.id
  }
  tags = {
    Name = "main-public"
  }
}
# Route Associated Public Subnets
resource "aws_route_table_association" "public-main-1" {
  subnet_id      = aws_subnet.vpc-main-public1.id
  route_table_id = aws_route_table.main-public.id
}
resource "aws_route_table_association" "public-main-2" {
  subnet_id      = aws_subnet.vpc-main-public2.id
  route_table_id = aws_route_table.main-public.id
}
resource "aws_route_table_association" "public-main-3" {
  subnet_id      = aws_subnet.vpc-main-public3.id
  route_table_id = aws_route_table.main-public.id
}

###Step 3: Create a nat.tf file with below content.

# nat gateway
resource "aws_eip" "nat" {
  vpc = true
}
resource "aws_nat_gateway" "nat-gw" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.vpc-main-public1.id
  depends_on    = [aws_internet_gateway.main-gw]
}
# VPC setup for NAT
resource "aws_route_table" "private-main" {
  vpc_id = aws_vpc.vpc-main.id
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat-gw.id
  }
  tags = {
    Name = "private-main"
  }
}
# route associations private
resource "aws_route_table_association" "vpc-main-private-1" {
  subnet_id      = aws_subnet.vpc-main-private1.id
  route_table_id = aws_route_table.private-main.id
}
resource "aws_route_table_association" "vpc-main-private-2" {
  subnet_id      = aws_subnet.vpc-main-private2.id
  route_table_id = aws_route_table.private-main.id
}
resource "aws_route_table_association" "vpc-main-private-3" {
  subnet_id      = aws_subnet.vpc-main-private3.id
  route_table_id = aws_route_table.private-main.id
}


###Step 4: Create a vars.tf file with below content.

variable "AWS_REGION" {
  default = "ap-south-1"
}

###Step 5: Execute terraform init followed by terraform apply deploy the infrastructure.

terraform init
terraform apply
